/**
 * generated by Xtext 2.24.0
 */
package uk.kcl.pgt.mdd.cw.game.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.kcl.pgt.mdd.cw.game.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GameFactoryImpl extends EFactoryImpl implements GameFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GameFactory init()
  {
    try
    {
      GameFactory theGameFactory = (GameFactory)EPackage.Registry.INSTANCE.getEFactory(GamePackage.eNS_URI);
      if (theGameFactory != null)
      {
        return theGameFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GameFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GamePackage.GAME: return createGame();
      case GamePackage.DECL: return createDecl();
      case GamePackage.VAR_DECL: return createVarDecl();
      case GamePackage.OBJ_DECL: return createObjDecl();
      case GamePackage.ATTR_ASS_LIST: return createAttrAssList();
      case GamePackage.ATTR_ASS: return createAttrAss();
      case GamePackage.STMT_BLOCK: return createStmtBlock();
      case GamePackage.STMT: return createStmt();
      case GamePackage.IF_STMT: return createIfStmt();
      case GamePackage.WHILE_STMT: return createWhileStmt();
      case GamePackage.FOR_STMT: return createForStmt();
      case GamePackage.END_STMT: return createEndStmt();
      case GamePackage.ASS_STMT: return createAssStmt();
      case GamePackage.VAR: return createVar();
      case GamePackage.VAR_ARRAY: return createVarArray();
      case GamePackage.VAR_PROP: return createVarProp();
      case GamePackage.BLOCK: return createBlock();
      case GamePackage.ANIM_BLOCK: return createAnimBlock();
      case GamePackage.EVENT_BLOCK: return createEventBlock();
      case GamePackage.EXPRESSION: return createExpression();
      case GamePackage.UNARY_OPERATION: return createUnaryOperation();
      case GamePackage.INT_LITERAL: return createIntLiteral();
      case GamePackage.EXPR_VAR: return createExprVar();
      case GamePackage.OPERATION: return createOperation();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Game createGame()
  {
    GameImpl game = new GameImpl();
    return game;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Decl createDecl()
  {
    DeclImpl decl = new DeclImpl();
    return decl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDecl createVarDecl()
  {
    VarDeclImpl varDecl = new VarDeclImpl();
    return varDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjDecl createObjDecl()
  {
    ObjDeclImpl objDecl = new ObjDeclImpl();
    return objDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttrAssList createAttrAssList()
  {
    AttrAssListImpl attrAssList = new AttrAssListImpl();
    return attrAssList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttrAss createAttrAss()
  {
    AttrAssImpl attrAss = new AttrAssImpl();
    return attrAss;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StmtBlock createStmtBlock()
  {
    StmtBlockImpl stmtBlock = new StmtBlockImpl();
    return stmtBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Stmt createStmt()
  {
    StmtImpl stmt = new StmtImpl();
    return stmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStmt createIfStmt()
  {
    IfStmtImpl ifStmt = new IfStmtImpl();
    return ifStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileStmt createWhileStmt()
  {
    WhileStmtImpl whileStmt = new WhileStmtImpl();
    return whileStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForStmt createForStmt()
  {
    ForStmtImpl forStmt = new ForStmtImpl();
    return forStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EndStmt createEndStmt()
  {
    EndStmtImpl endStmt = new EndStmtImpl();
    return endStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssStmt createAssStmt()
  {
    AssStmtImpl assStmt = new AssStmtImpl();
    return assStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarArray createVarArray()
  {
    VarArrayImpl varArray = new VarArrayImpl();
    return varArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarProp createVarProp()
  {
    VarPropImpl varProp = new VarPropImpl();
    return varProp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnimBlock createAnimBlock()
  {
    AnimBlockImpl animBlock = new AnimBlockImpl();
    return animBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventBlock createEventBlock()
  {
    EventBlockImpl eventBlock = new EventBlockImpl();
    return eventBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryOperation createUnaryOperation()
  {
    UnaryOperationImpl unaryOperation = new UnaryOperationImpl();
    return unaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprVar createExprVar()
  {
    ExprVarImpl exprVar = new ExprVarImpl();
    return exprVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GamePackage getGamePackage()
  {
    return (GamePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GamePackage getPackage()
  {
    return GamePackage.eINSTANCE;
  }

} //GameFactoryImpl
