/**
 * generated by Xtext 2.24.0
 */
package uk.kcl.pgt.mdd.cw.game.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import uk.kcl.pgt.mdd.cw.game.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see uk.kcl.pgt.mdd.cw.game.GamePackage
 * @generated
 */
public class GameAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GamePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = GamePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameSwitch<Adapter> modelSwitch =
    new GameSwitch<Adapter>()
    {
      @Override
      public Adapter caseGame(Game object)
      {
        return createGameAdapter();
      }
      @Override
      public Adapter caseDecl(Decl object)
      {
        return createDeclAdapter();
      }
      @Override
      public Adapter caseVarDecl(VarDecl object)
      {
        return createVarDeclAdapter();
      }
      @Override
      public Adapter caseObjDecl(ObjDecl object)
      {
        return createObjDeclAdapter();
      }
      @Override
      public Adapter caseAttrAssList(AttrAssList object)
      {
        return createAttrAssListAdapter();
      }
      @Override
      public Adapter caseAttrAss(AttrAss object)
      {
        return createAttrAssAdapter();
      }
      @Override
      public Adapter caseStmtBlock(StmtBlock object)
      {
        return createStmtBlockAdapter();
      }
      @Override
      public Adapter caseStmt(Stmt object)
      {
        return createStmtAdapter();
      }
      @Override
      public Adapter caseIfStmt(IfStmt object)
      {
        return createIfStmtAdapter();
      }
      @Override
      public Adapter caseWhileStmt(WhileStmt object)
      {
        return createWhileStmtAdapter();
      }
      @Override
      public Adapter caseForStmt(ForStmt object)
      {
        return createForStmtAdapter();
      }
      @Override
      public Adapter caseEndStmt(EndStmt object)
      {
        return createEndStmtAdapter();
      }
      @Override
      public Adapter caseAssStmt(AssStmt object)
      {
        return createAssStmtAdapter();
      }
      @Override
      public Adapter caseVar(Var object)
      {
        return createVarAdapter();
      }
      @Override
      public Adapter caseVarArray(VarArray object)
      {
        return createVarArrayAdapter();
      }
      @Override
      public Adapter caseVarProp(VarProp object)
      {
        return createVarPropAdapter();
      }
      @Override
      public Adapter caseBlock(Block object)
      {
        return createBlockAdapter();
      }
      @Override
      public Adapter caseAnimBlock(AnimBlock object)
      {
        return createAnimBlockAdapter();
      }
      @Override
      public Adapter caseEventBlock(EventBlock object)
      {
        return createEventBlockAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseUnaryOperation(UnaryOperation object)
      {
        return createUnaryOperationAdapter();
      }
      @Override
      public Adapter caseIntLiteral(IntLiteral object)
      {
        return createIntLiteralAdapter();
      }
      @Override
      public Adapter caseExprVar(ExprVar object)
      {
        return createExprVarAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.Game <em>Game</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.Game
   * @generated
   */
  public Adapter createGameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.Decl <em>Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.Decl
   * @generated
   */
  public Adapter createDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.VarDecl <em>Var Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.VarDecl
   * @generated
   */
  public Adapter createVarDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.ObjDecl <em>Obj Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.ObjDecl
   * @generated
   */
  public Adapter createObjDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.AttrAssList <em>Attr Ass List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.AttrAssList
   * @generated
   */
  public Adapter createAttrAssListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.AttrAss <em>Attr Ass</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.AttrAss
   * @generated
   */
  public Adapter createAttrAssAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.StmtBlock <em>Stmt Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.StmtBlock
   * @generated
   */
  public Adapter createStmtBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.Stmt <em>Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.Stmt
   * @generated
   */
  public Adapter createStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.IfStmt <em>If Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.IfStmt
   * @generated
   */
  public Adapter createIfStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.WhileStmt <em>While Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.WhileStmt
   * @generated
   */
  public Adapter createWhileStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.ForStmt <em>For Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.ForStmt
   * @generated
   */
  public Adapter createForStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.EndStmt <em>End Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.EndStmt
   * @generated
   */
  public Adapter createEndStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.AssStmt <em>Ass Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.AssStmt
   * @generated
   */
  public Adapter createAssStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.Var <em>Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.Var
   * @generated
   */
  public Adapter createVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.VarArray <em>Var Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.VarArray
   * @generated
   */
  public Adapter createVarArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.VarProp <em>Var Prop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.VarProp
   * @generated
   */
  public Adapter createVarPropAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.Block <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.Block
   * @generated
   */
  public Adapter createBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.AnimBlock <em>Anim Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.AnimBlock
   * @generated
   */
  public Adapter createAnimBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.EventBlock <em>Event Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.EventBlock
   * @generated
   */
  public Adapter createEventBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.UnaryOperation <em>Unary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.UnaryOperation
   * @generated
   */
  public Adapter createUnaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.IntLiteral <em>Int Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.IntLiteral
   * @generated
   */
  public Adapter createIntLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.ExprVar <em>Expr Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.ExprVar
   * @generated
   */
  public Adapter createExprVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.pgt.mdd.cw.game.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.pgt.mdd.cw.game.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //GameAdapterFactory
