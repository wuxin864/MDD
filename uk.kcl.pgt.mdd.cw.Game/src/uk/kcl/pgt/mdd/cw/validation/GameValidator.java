/*
 * generated by Xtext 2.24.0
 */
package uk.kcl.pgt.mdd.cw.validation;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;

import uk.kcl.pgt.mdd.cw.game.AnimBlock;
import uk.kcl.pgt.mdd.cw.game.Block;
import uk.kcl.pgt.mdd.cw.game.Decl;
import uk.kcl.pgt.mdd.cw.game.Game;
import uk.kcl.pgt.mdd.cw.game.GamePackage;
import uk.kcl.pgt.mdd.cw.game.Var;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class GameValidator extends AbstractGameValidator {
	
	public static final String EXISTED_VARIABLE = "existedVariable";
	public static final String NO_DECLARATION = "noDeclaration";
	
	@Check
	public void checkVarDeclUniqueName(Game game) {
		Map<String, Integer> occurances = new HashMap<>();
		for(Decl d : game.getDecl()) {
			occurances.compute(d.getName(), (a, b) -> {
				if(b == null) {
					return 1;
				} else {
					error("The variable " + d.getName() + " has existed", GamePackage.Literals.GAME__DECL, GameValidator.EXISTED_VARIABLE);
					return b++;
				}
			});
		}
	}
	
	
	@Check
	public void checkVariableDeclared(Var var) {
		if(GameValidator.isAnimation(var)) {
			return;
		}
		if(GameValidator.isParameter(var)) {
			return;
		}
			Game game = (Game) var.eResource().getAllContents().next();
			if(!var.getName().equals(game.getName())) {
				Decl d = GameValidator.findVarDecl(var);
				if(d == null) {
					error("Should declare this variable", GamePackage.Literals.VAR__VAR_PROP, GameValidator.NO_DECLARATION);
				}
		}
	}
	
	
	
	public static boolean isParameter(Var var) {
		EObject container = var.eContainer();
		while(container != null) {
			if(container instanceof AnimBlock) {
				return ((AnimBlock) container).getObjName().equals(var.getName());
			}
			container = container.eContainer();
		}
		return false;
	}
	
	public static Decl findVarDecl(Var var) {
		Game game = (Game) var.eResource().getAllContents().next();
		for(Decl d : game.getDecl()) {
			if(d.getName().equals(var.getName())) {
				if(var.getVarArray() != null) {
					if(d.getArrSize() > 0) {
						return d;
					}
				} else {
					return d;
				}
			}
		}
		return null;
	}
	
	public static boolean isAnimation(Var var) {
		Game game = (Game) var.eResource().getAllContents().next();
		for(Block b : game.getFunctions()) {
			if(b instanceof AnimBlock) {
				AnimBlock anim = (AnimBlock) b;
				if(anim.getName().equals(var.getName())) {
					return true;
				}
			}
		}
		return false;
	}

}

